require(mvtnorm)
require(MASS)
#Implemntation of Toy example
#####Setup
p<-50 #Dimensionailty of problem
yobs<-c(10,rep(0,p-1)) #Observed Data
sigma0<-1 #Variance of DGP
b<-0.1 #Prior dependence between theta_1 and theta_2
tol<-0.1 #Percentage of draws to keep (controls epsilon for uniform kernel)
####Simulate from prior
N<-100000 #Number of draws
A<-c(100,rep(1,(p-1)))%>%diag%>%matrix(p,p) #Matrix for simulating
theta_all<-rmvnorm(N,rep(0,p),A) #Step 1 to simulate theta
theta_all[,2]<-theta_all[,2]+(b*theta_all[,1]^2)-(100*b) #Step 2 to simulate theta
####Simulate data
y<-matrix(rnorm(N*p),N,p)*sigma0+theta_all
####Compute Statistics
sobs<-yobs
s<-y
#####Compute distance (for all s) and keep
diff<-s-matrix(sobs,N,p,byrow = TRUE) #Difference between s and sobs - matrix
diff2<-diff^2 #squared
dist_alls<-apply(diff2,1,sum)%>%sqrt #Euclidean Distance
epsilon_alls<-quantile(dist_alls,tol) #Find Epsilon
theta_vanilla<-theta_all[(dist_alls<epsilon_alls),] #Decide which theta to keep
dens_vanilla<-kde2d(theta_vanilla[,1],theta_vanilla[,2])
contour(dens_vanilla)
source('~/Documents/Research/VineABC/Scripts/ReplicateLiEtAl.r', echo=TRUE)
poste<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-(theta[2]-0.5*((b*(theta[1]^2))+(100*b))^2-sum(theta[3:length(theta)]^2))
lpo<-lpr+ll
return(exp(lpo))
}
poste(c(10,0,0,0,0))
lposte<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-(theta[2]-0.5*((b*(theta[1]^2))+(100*b))^2-sum(theta[3:length(theta)]^2))
lpo<-lpr+ll
return(lpo)
}
lposte(c(10,0,0,0,0))
lposte(c(-10,0,0,0,0))
rm(list=ls())
rm(list=ls())
require(magrittr)
require(mvtnorm)
require(MASS)
#Implemntation of Toy example
###Posterior function (up to proportionality)
lposte<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-(theta[2]-0.5*((b*(theta[1]^2))+(100*b))^2-sum(theta[3:length(theta)]^2))
lpo<-lpr+ll
return(lpo)
}
#####Setup
p<-50 #Dimensionailty of problem
yobs<-c(10,rep(0,p-1)) #Observed Data
sigma0<-1 #Variance of DGP
b<-0.1 #Prior dependence between theta_1 and theta_2
tol<-0.01 #Percentage of draws to keep (controls epsilon for uniform kernel)
####Simulate from prior
N<-1000000 #Number of draws
A<-c(100,rep(1,(p-1)))%>%diag%>%matrix(p,p) #Matrix for simulating
theta_all<-rmvnorm(N,rep(0,p),A) #Step 1 to simulate theta
theta_all[,2]<-theta_all[,2]+(b*(theta_all[,1]^2))-(100*b) #Step 2 to simulate theta
####Simulate data
y<-matrix(rnorm(N*p),N,p)*sigma0+theta_all
####Compute Statistics
sobs<-yobs
s<-y
#####Compute distance (for all s) and keep
diff<-s-matrix(sobs,N,p,byrow = TRUE) #Difference between s and sobs - matrix
diff2<-diff^2 #squared
dist_alls<-apply(diff2,1,sum)%>%sqrt #Euclidean Distance
epsilon_alls<-quantile(dist_alls,tol) #Find Epsilon
theta_vanilla<-theta_all[(dist_alls<epsilon_alls),] #Decide which theta to keep
dens_vanilla<-kde2d(theta_vanilla[,1],theta_vanilla[,2])
contour(dens_vanilla)
lposte<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-(theta[2]-0.5*((b*(theta[1]^2))+(100*b))^2)
lpo<-lpr+ll
return(lpo)
}
dens_vanilla$x
dens_vanilla$y
?grid()
dim(dens_vanilla$z)
length(dens_vanilla$x)
length(dens_vanilla$y)
rm(list=ls())
require(magrittr)
require(mvtnorm)
require(MASS)
#Implemntation of Toy example
###Posterior function (up to proportionality)
lposte<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-(theta[2]-0.5*((b*(theta[1]^2))+(100*b))^2)
lpo<-lpr+ll
return(lpo)
}
#####Setup
p<-50 #Dimensionailty of problem
yobs<-c(10,rep(0,p-1)) #Observed Data
sigma0<-1 #Variance of DGP
b<-0.1 #Prior dependence between theta_1 and theta_2
tol<-0.01 #Percentage of draws to keep (controls epsilon for uniform kernel)
####Simulate from prior
N<-1000000 #Number of draws
A<-c(100,rep(1,(p-1)))%>%diag%>%matrix(p,p) #Matrix for simulating
theta_all<-rmvnorm(N,rep(0,p),A) #Step 1 to simulate theta
theta_all[,2]<-theta_all[,2]+(b*(theta_all[,1]^2))-(100*b) #Step 2 to simulate theta
####Simulate data
y<-matrix(rnorm(N*p),N,p)*sigma0+theta_all
####Compute Statistics
sobs<-yobs
s<-y
#####Compute distance (for all s) and keep
diff<-s-matrix(sobs,N,p,byrow = TRUE) #Difference between s and sobs - matrix
diff2<-diff^2 #squared
dist_alls<-apply(diff2,1,sum)%>%sqrt #Euclidean Distance
epsilon_alls<-quantile(dist_alls,tol) #Find Epsilon
theta_vanilla<-theta_all[(dist_alls<epsilon_alls),] #Decide which theta to keep
dens_vanilla<-kde2d(theta_vanilla[,1],theta_vanilla[,2])
contour(dens_vanilla)
zlpo<-matrix(0,length(dens_vanilla$x),length(dens_vanilla$y))
for (i in 1:length(dens_vanilla$x)){
for (j in 1:length(dens_vanilla$y)){
theta_i<-c(dens_vanilla$x[i],dens_vanilla$y[j])
zlpo[i,j]<-lposte(theta_i)
}
}
View(zlpo)
max(zlpo)
exp(zlpo)
max(zlpo)
exp(365)
exp(366)
min(zlpo)
rm(list=ls())
require(magrittr)
require(mvtnorm)
require(MASS)
#Implemntation of Toy example
###Posterior function (up to proportionality)
lposte<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-(theta[2]-0.5*((b*(theta[1]^2))+(100*b))^2)
lpo<-lpr+ll
return(lpo)
}
#####Setup
p<-50 #Dimensionailty of problem
yobs<-c(10,rep(0,p-1)) #Observed Data
sigma0<-1 #Variance of DGP
b<-0.1 #Prior dependence between theta_1 and theta_2
tol<-0.01 #Percentage of draws to keep (controls epsilon for uniform kernel)
####Simulate from prior
N<-1000000 #Number of draws
A<-c(100,rep(1,(p-1)))%>%diag%>%matrix(p,p) #Matrix for simulating
theta_all<-rmvnorm(N,rep(0,p),A) #Step 1 to simulate theta
theta_all[,2]<-theta_all[,2]+(b*(theta_all[,1]^2))-(100*b) #Step 2 to simulate theta
####Simulate data
y<-matrix(rnorm(N*p),N,p)*sigma0+theta_all
####Compute Statistics
sobs<-yobs
s<-y
#####Compute distance (for all s) and keep
diff<-s-matrix(sobs,N,p,byrow = TRUE) #Difference between s and sobs - matrix
diff2<-diff^2 #squared
dist_alls<-apply(diff2,1,sum)%>%sqrt #Euclidean Distance
epsilon_alls<-quantile(dist_alls,tol) #Find Epsilon
theta_vanilla<-theta_all[(dist_alls<epsilon_alls),] #Decide which theta to keep
dens_vanilla<-kde2d(theta_vanilla[,1],theta_vanilla[,2])
contour(dens_vanilla,col='red')
zlpo<-matrix(0,length(dens_vanilla$x),length(dens_vanilla$y))
for (i in 1:length(dens_vanilla$x)){
for (j in 1:length(dens_vanilla$y)){
theta_i<-c(dens_vanilla$x[i],dens_vanilla$y[j])
zlpo[i,j]<-lposte(theta_i)
}
}
ezlp<-exp(zlpo)
contour(dens_vanilla$x,dens_vanilla$y,ezlp,lty=2)
contour(dens_vanilla,col='red')
contour(dens_vanilla$x,dens_vanilla$y,zlpo,lty=2,add=TRUE)
lposte<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-0.5*((theta[2]-(b*(theta[1]^2))+(100*b))^2)
lpo<-lpr+ll
return(lpo)
}
rm(list=ls())
require(magrittr)
require(mvtnorm)
require(MASS)
#Implemntation of Toy example
###Posterior function (up to proportionality)
lposte<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-0.5*((theta[2]-(b*(theta[1]^2))+(100*b))^2)
lpo<-lpr+ll
return(lpo)
}
#####Setup
p<-50 #Dimensionailty of problem
yobs<-c(10,rep(0,p-1)) #Observed Data
sigma0<-1 #Variance of DGP
b<-0.1 #Prior dependence between theta_1 and theta_2
tol<-0.01 #Percentage of draws to keep (controls epsilon for uniform kernel)
####Simulate from prior
N<-1000000 #Number of draws
A<-c(100,rep(1,(p-1)))%>%diag%>%matrix(p,p) #Matrix for simulating
theta_all<-rmvnorm(N,rep(0,p),A) #Step 1 to simulate theta
theta_all[,2]<-theta_all[,2]+(b*(theta_all[,1]^2))-(100*b) #Step 2 to simulate theta
####Simulate data
y<-matrix(rnorm(N*p),N,p)*sigma0+theta_all
####Compute Statistics
sobs<-yobs
s<-y
#####Compute distance (for all s) and keep
diff<-s-matrix(sobs,N,p,byrow = TRUE) #Difference between s and sobs - matrix
diff2<-diff^2 #squared
dist_alls<-apply(diff2,1,sum)%>%sqrt #Euclidean Distance
epsilon_alls<-quantile(dist_alls,tol) #Find Epsilon
theta_vanilla<-theta_all[(dist_alls<epsilon_alls),] #Decide which theta to keep
dens_vanilla<-kde2d(theta_vanilla[,1],theta_vanilla[,2])
contour(dens_vanilla,col='red')
zlpo<-matrix(0,length(dens_vanilla$x),length(dens_vanilla$y))
for (i in 1:length(dens_vanilla$x)){
for (j in 1:length(dens_vanilla$y)){
theta_i<-c(dens_vanilla$x[i],dens_vanilla$y[j])
zlpo[i,j]<-lposte(theta_i)
}
}
ezlp<-exp(zlpo)
contour(dens_vanilla$x,dens_vanilla$y,zlpo,lty=2,add=TRUE)
rm(list=ls())
rm(list=ls())
require(magrittr)
require(mvtnorm)
require(MASS)
#Implemntation of Toy example
###Posterior function (up to proportionality)
lposte<-function(theta){
ll<-dnorm(theta[1]-10,1,log=TRUE)
for (j in 2:length(theta)){
ll<-ll+dnorm(theta[j],1,log=TRUE)
}
lpr<--(theta[1]^2/200)-0.5*((theta[2]-(b*(theta[1]^2))+(100*b))^2)
lpo<-lpr+ll
return(lpo)
}
#####Setup
p<-50 #Dimensionailty of problem
yobs<-c(10,rep(0,p-1)) #Observed Data
sigma0<-1 #Variance of DGP
b<-0.1 #Prior dependence between theta_1 and theta_2
tol<-0.01 #Percentage of draws to keep (controls epsilon for uniform kernel)
####Simulate from prior
N<-1000000 #Number of draws
A<-c(100,rep(1,(p-1)))%>%diag%>%matrix(p,p) #Matrix for simulating
theta_all<-rmvnorm(N,rep(0,p),A) #Step 1 to simulate theta
theta_all[,2]<-theta_all[,2]+(b*(theta_all[,1]^2))-(100*b) #Step 2 to simulate theta
####Simulate data
y<-matrix(rnorm(N*p),N,p)*sigma0+theta_all
####Compute Statistics
sobs<-yobs
s<-y
#####Compute distance (for all s) and keep
diff<-s-matrix(sobs,N,p,byrow = TRUE) #Difference between s and sobs - matrix
diff2<-diff^2 #squared
dist_alls<-apply(diff2,1,sum)%>%sqrt #Euclidean Distance
epsilon_alls<-quantile(dist_alls,tol) #Find Epsilon
theta_vanilla<-theta_all[(dist_alls<epsilon_alls),] #Decide which theta to keep
dens_vanilla<-kde2d(theta_vanilla[,1],theta_vanilla[,2])
contour(dens_vanilla,col='red')
zlpo<-matrix(0,length(dens_vanilla$x),length(dens_vanilla$y))
for (i in 1:length(dens_vanilla$x)){
for (j in 1:length(dens_vanilla$y)){
theta_i<-c(dens_vanilla$x[i],dens_vanilla$y[j])
zlpo[i,j]<-lposte(theta_i)
}
}
ezlp<-exp(zlpo)
contour(dens_vanilla$x,dens_vanilla$y,ezlp,lty=2,add=TRUE)
source('~/Documents/Research/VineABC/Scripts/ReplicateLiEtAl.r', echo=TRUE)
s<-matrix(c(1,1,1,0,0,1),3,2,byrow = TRUE)
s<-matrix(c(1/2,1/2,1,0,0,1),3,2,byrow = TRUE)
s
solve(t(s)%>%s,t(s))
solve(t(s)%*%s,t(s))
require(magrittr)
solve(t(s)%*%s,t(s))%>%apply(.,1,sum)
s<-matrix(c(1,1,1,0,0,1),3,2,byrow = TRUE)
solve(t(s)%*%s,t(s))%>%apply(.,1,sum)
rm(list=ls())
S<-matrix(c(0.5,0.5,1,0,0,1),3,2,byrow = TRUE)
S
P<-matrix(runif(6),2,3)
P
S
S%*%P%*%S
S%*%P%*%S[,1]
P
P%*%S[,1]
require(devtools)
install_git("https://github.com/ccolonescu/PoEdata")
require('PoEdata')
data("br")->br
head(br)
data(br)->br
head(br)
rm(list=ls())
data(br)
head(br)
require(magrittr)
data(cps)%>%head
cps%>%head
data(homes)
head9homes
head(homes)
data(infln_wage)
head(infln_wage)
data("olympics")
olympics%>%head
data(rice)
rice
data(andy)
andy
data("fair4")
fiar
fair4
data("Titanic")
head(Titanic)
Titanic
data("crimtab")
crimtab
head(crimtab)
data("swiss")
swiss
?swiss
library(tidyverse)
data("starwars")
starwars
data("population")
population
data("who")
who
?who
data("diamonds")
diamonds
?diamonds
data("economics")
?economics
data("midwest")
?midwest
midwest
data("txhousing")
?txhousing
txhousing
require(PoEdata)
data("br")
br
head(br)
require(magrittr)
head(txhousing)
txhousing$year%>%unique()
txhousing%>%filter(year==2015)%>%ggplot(aes(x=inventory,y=median,col=month,label=inventory)+geom_point()
)
txhousing%>%filter(year==2015)%>%ggplot(aes(x=inventory,y=median,col=month,label=inventory))+geom_point()
txhousing%>%filter(year==2014)%>%mutate(month=as.factor(month))%>%ggplot(aes(x=inventory,y=median,col=month,label=inventory))+geom_point()
txhousing%>%filter(year==2014)%>%mutate(month=as.factor(month))%>%ggplot(aes(x=inventory,y=median,col=month,label=inventory))+geom_point()->g
require(ggplotly)
require(plotly)
plotly(g)
?plotly
ggplotly(g)
txhousing%>%filter(year==2014)%>%mutate(month=as.factor(month))%>%ggplot(aes(x=inventory,y=median,col=month,text=inventory))+geom_point()->g
ggplotly(g)
txhousing%>%filter(year==2014)%>%mutate(month=as.factor(month))%>%ggplot(aes(x=inventory,y=median,col=month,text=city))+geom_point()->g
ggplotly(g)
txhousing%>%filter(year==2014)%>%mutate(month=as.factor(month))%>%ggplot(aes(text=city,x=inventory,y=median,col=month))+geom_point()->g
ggplotly(g)
txhousing%>%filter((year==2014)&(month==12))%>%ggplot(aes(text=city,x=inventory,y=median))+geom_point()->g
ggplotly(g)
txhousing%>%filter((year==2014)&(month==12))%>%ggplot(aes(x=inventory,y=median))+geom_point(aes(text=city))->g
ggplotly(g)
txhousing%>%filter((year==2014)&(month==12))%>%ggplot(aes(x=inventory,y=median))+geom_point(aes(text=city))+scale_y_log10()+scale_x_log10()->g
ggplotly(g)
txhousing%>%filter((year==2014)&(month==12))%>%ggplot(aes(x=inventory,y=median))+geom_point(text=city)+scale_y_log10()+scale_x_log10()->g
ggplotly(g,tooltip = text())
txhousing%>%filter((year==2014)&(month==12))%>%ggplot(aes(x=inventory,y=median,text=city))+geom_point()+scale_y_log10()+scale_x_log10()->g
ggplotly(g,tooltip = text())
ggplotly(g,tooltip = text
)
ggplotly(g,tooltip = "text")
devtools::install_git(https://github.com/robjhyndman/MonashEBSTemplates)
devtools::install_git('https://github.com/robjhyndman/MonashEBSTemplates')
require(MonashEBSTemplates)
MonashEBSTemplates::exam()
?MonashEBSTemplates::exam()
?exam
xaringan:::inf_mr()
devtools::install_github(rstudio/httpuv)
devtools::install_github(https://github.com/rstudio/httpuv)
devtools::install_github('rstudio/httpuv')
devtools::install_github('yihui/servr')
xaringan:::inf_mr()
S<-matrix(c(1,1,1,0,0,1),3,2)
S
S<-matrix(c(1,1,1,0,0,1),3,2,byrow = TRUE)
S
svd(s)->ss
svd(S)->ss
U<-ss$u
V<-ss$v
ss$d
D<-diag(ss$d)
U
V
D
X<-matrix(runif(200),100,2)
X
X<-matrix(runif(300),100,3)
Sigmahat<-t(X)%*%X
Sigmahat
Sigmatilde<-S%*%solve(t(S)%*%solve(Sigmahat)%*%S)t(S)
Sigmatilde<-S%*%solve(t(S)%*%solve(Sigmahat)%*%S)%*%t(S)
Sigmatilde
Up<-U[,1:2]
Up
Up%*%t(Up)%*%Sigmahat%*%t(Up)%*%Up
Up%*%t(Up)%*%Sigmahat%*%Up%*%t(Up)
require(PoEdata)
data('cps4_small')
head(cps4_small)
nrow(cps4_small)
write.csv(x = 'cps4_small',file = '~/Downloads/cps4_small.csv')
write.csv(x = cps4_small,file = '~/Downloads/cps4_small.csv')
require(PoEdata)
data("br")
head(br)
head(br2)
head(br2)
head(br)
data("br2")
head(br2)
require(PoEdata)
data("br")
head(br)
min(br$age)
install.packages('rainbow')
?rainbow
library(rainbow)
?rainbow::rainbow
plot.fts
?plot.fts
?rainbow::fts()
p<-10
n<-100
1:10
age<-75:85
age
matrix(runif(11*60),11,60)
matrix(runif(11*60),11,60)->out
out
fts(age,out)
fts(age,out)->ff
plot(ff)
age
rainbow::fts(age,out)->ff
library(rainbow)
age<-75:85
matrix(runif(11*60),11,60)->out
rainbow::fts(age,out)
setwd("~/Dropbox/NonShared/HDDA2018/Lecture Notes/02R")
library(stringi)
library(devtools)
install_github('gagolews/stringi')
install_github('jeroen/curl')
xaringan:::inf_mr()
install_github('gagolews/stringi')
xaringan:::inf_mr()
xaringan:::inf_mr()
